{"version":3,"sources":["classes/LocStorage.ts","classes/Router.ts","classes/Form.ts","enums/field-type.enum.ts","classes/fields/FieldLabel.ts","classes/fields/CheckboxField.ts","classes/fields/TextAreaField.ts","classes/fields/SelectField.ts","classes/fields/InputField.ts","classes/fields/EmailField.ts","classes/fields/DateField.ts","classes/Components.ts","classes/FormCreator.ts","components/new-form/new-form.ts"],"names":[],"mappings":"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","file":"new-form.730035e0.js","sourceRoot":"..\\src","sourcesContent":["import { IDataStorage } from \"../interfaces/idata-storage\";\r\nimport { Form } from \"./Form\";\r\n\r\nexport class LocStorage implements IDataStorage {\r\n\r\n    constructor() {\r\n        this.DataStorage = window.localStorage;   \r\n    }\r\n\r\n    DataStorage: any;\r\n\r\n    saveDocument(documentObject: Form): string {\r\n        const savedDocument = this.DataStorage.setItem(`document-${Date.now()}`, JSON.stringify(documentObject));\r\n        return savedDocument;\r\n    }    \r\n\r\n    saveEditedDocument(documentObject: Form, key: string): string {\r\n        const savedDocument = this.DataStorage.setItem(key, JSON.stringify(documentObject));\r\n        return savedDocument;\r\n    }\r\n\r\n    loadDocument(key: string): object {\r\n        const loadedDocument = this.DataStorage.getItem(key);\r\n        return loadedDocument;\r\n    }\r\n\r\n    getDocuments(): string[] {\r\n        const documents: object = {...this.DataStorage};\r\n        const documentsArray: string[] = [];\r\n        for(let key in documents) {\r\n            if (key.substr(0,2)!='F-') {\r\n                if (!documents.hasOwnProperty(key)) continue;\r\n                documentsArray.push(key);\r\n            } \r\n        }\r\n        return documentsArray;\r\n    }\r\n\r\n    getForms(): string[] {\r\n        const formsArray: string[] = [];\r\n        const forms = {...this.DataStorage};\r\n        const formsKeysList = Object.keys(forms);\r\n        for (const name of formsKeysList) {\r\n            if (name.substr(0,2)=='F-') {\r\n                formsArray.push(name);\r\n            }\r\n        }\r\n        return formsArray;\r\n    }\r\n\r\n    removeDocument(key: string): void {\r\n        this.DataStorage.removeItem(key);\r\n    }\r\n\r\n    saveForm(formObject: Form, name: string): string {\r\n        const savedForm = this.DataStorage.setItem(`F-${name}-${Date.now()}`, JSON.stringify(formObject));\r\n        return savedForm;\r\n    }\r\n}","export class Router {\r\n    constructor() {\r\n\r\n    }\r\n\r\n    static getParam(): string {\r\n        const query: string = window.location.search.substr(1);\r\n        const urlParams = new URLSearchParams(query); \r\n        const id = urlParams.get('id') \r\n        return id;\r\n    }\r\n}","import { LocStorage } from './LocStorage';\r\nimport { IField } from './../interfaces/ifield';\r\nimport { Router } from './Router';\r\n\r\n\r\nexport class Form {\r\n    constructor(fields: IField[]) {\r\n         this.fieldsArray = fields;\r\n    }\r\n\r\n    private fieldsArray: IField[];\r\n\r\n    render(container: HTMLElement): void {\r\n        const formDocument: HTMLElement = document.createElement(\"form\");\r\n        formDocument.classList.add(\"form-horizontal\");\r\n        const saveButton = document.createElement('button');\r\n        saveButton.classList.add('btn');\r\n        saveButton.innerHTML = \"Save\";\r\n        const backwardButton = document.createElement('button');\r\n        backwardButton.classList.add('btn', 'btn-back');\r\n        backwardButton.innerHTML = \"Back\";\r\n        this.fieldsArray.forEach(field => {field.render(formDocument)});\r\n        formDocument.appendChild(saveButton);\r\n        saveButton.addEventListener('click', (ev) => { \r\n            ev.preventDefault();\r\n            ev.stopImmediatePropagation();\r\n            if(Router.getParam() != null && !Router.getParam().startsWith('F-')) {\r\n                this.saveEdit(this, Router.getParam());\r\n            }\r\n            else { \r\n                this.save(this); \r\n            }\r\n        });\r\n        formDocument.appendChild(backwardButton);\r\n        backwardButton.addEventListener('click', function(ev) {\r\n            ev.preventDefault();\r\n            ev.stopImmediatePropagation();\r\n            window.location.replace('../document-list/document-list.html');\r\n        });\r\n        container.appendChild(formDocument);\r\n    }\r\n\r\n    getValue(): object {\r\n        return this.fieldsArray.map(field => {\r\n            return {type: field.Type, label: field.Label, name: field.Name, value: field.Value };\r\n        })\r\n    }\r\n\r\n    saveEdit(data: Form, key: string): void {\r\n        const storage = new LocStorage();\r\n        storage.saveEditedDocument(data, key);\r\n        alert(\"Document edited\");\r\n        window.location.href = \"../document-list/document-list.html\";\r\n    }\r\n    \r\n    save(data: Form): void {\r\n        const storage = new LocStorage();\r\n        storage.saveDocument(data);\r\n        alert(\"Document saved\");    \r\n        window.location.href = \"../../index.html\";\r\n    }   \r\n}","export enum FieldType {\r\n    Textbox = \"text\",\r\n    Textlargebox = \"textarea\",\r\n    Date = \"date\",\r\n    Email = \"email\",\r\n    Selectbox = \"radio\",\r\n    Checkbox = \"checkbox\"\r\n}","export class FieldLabel  {\r\n    constructor(container: HTMLElement, tagStyle: string, content: string){\r\n        const element = document.createElement(\"LABEL\");\r\n        element.className = tagStyle;\r\n        element.innerHTML = content;\r\n        container.appendChild(element);\r\n    };\r\n} \r\n\r\n","import { IField } from '../../interfaces/ifield';\r\nimport { FieldType } from '../../enums/field-type.enum';\r\nimport { FieldLabel } from './FieldLabel';\r\n\r\nexport class CheckboxField implements IField {\r\n    constructor(name: string, label: string, value: boolean) {\r\n        this.Name = name;\r\n        this.Label = label;\r\n        this.Value = value;\r\n    }\r\n\r\n    Name: string;    \r\n    Label: string;\r\n    Type: FieldType = FieldType.Checkbox;\r\n    Value: boolean;\r\n    Input: HTMLInputElement;\r\n\r\n    render(container: HTMLElement): void {\r\n        const fieldContainer = document.createElement('div');\r\n        fieldContainer.classList.add('form-group');\r\n        new FieldLabel(fieldContainer, 'question-label', this.Label);\r\n        const element = document.createElement('input');\r\n        //element.classList.add('form-control');\r\n        element.setAttribute('type', this.Type);\r\n        fieldContainer.appendChild(element);\r\n        container.appendChild(fieldContainer);\r\n        this.Input = element;\r\n        if(this.Value === true) { element.checked = true };\r\n        element.addEventListener('change', () => {\r\n            if(element.checked == true) {\r\n                this.Value = true;\r\n            } else {\r\n                this.Value = false;\r\n            }\r\n        });\r\n    }\r\n    \r\n    setValue(event: Event): any {\r\n        event.preventDefault();\r\n        event.stopImmediatePropagation();\r\n        this.Value = true;\r\n    }\r\n\r\n    getValue(): boolean{\r\n        return this.Value;\r\n    }\r\n}","import { IField } from '../../interfaces/ifield';\r\nimport { FieldType } from '../../enums/field-type.enum';\r\nimport { FieldLabel } from './FieldLabel';\r\n\r\nexport class TextAreaField  implements IField {\r\n    constructor(name: string, label: string, value: string) {\r\n        \r\n        this.Name = name;\r\n        this.Label = label;\r\n        this.Value = value;\r\n    }\r\n\r\n    Name: string;    \r\n    Label: string;\r\n    Type: FieldType = FieldType.Textlargebox;\r\n    Value: string;\r\n    Input: HTMLTextAreaElement;\r\n\r\n    render(container: HTMLTextAreaElement): void {\r\n        const fieldContainer = document.createElement('div');\r\n        fieldContainer.classList.add('form-group');\r\n        new FieldLabel(fieldContainer, 'question-label', this.Label);\r\n        const element = document.createElement('textarea');\r\n        element.classList.add('form-control');\r\n        element.value = this.Value;\r\n        fieldContainer.appendChild(element);   \r\n        container.appendChild(fieldContainer);  \r\n        this.Input = element;\r\n        element.addEventListener('keyup', (ev) => {\r\n            this.Value = ev.target.value;\r\n        });\r\n        element.addEventListener('paste', (ev) => {\r\n            this.Value = ev.target.value;\r\n        });\r\n        element.addEventListener('cut', (ev) => {\r\n            this.Value = ev.target.value;\r\n        });\r\n    }\r\n    \r\n    setValue(event: Event): any {    \r\n        event.preventDefault();\r\n        event.stopImmediatePropagation();\r\n        this.Value = event.target.value;\r\n    }\r\n\r\n    getValue(): string {\r\n        return this.Value;\r\n    }\r\n    \r\n}","import { IField } from '../../interfaces/ifield';\r\nimport { FieldType } from '../../enums/field-type.enum';\r\nimport { FieldLabel } from './FieldLabel';\r\n\r\nexport class SelectField  implements IField {\r\n\r\n    constructor(name: string, label: string, options: string[], value: string | null) {\r\n        this.Name = name;\r\n        this.Label = label;\r\n        this.Options = options;\r\n        this.Value = value;\r\n    }\r\n    \r\n    Name: string;    \r\n    Label: string;\r\n    Options: string[];\r\n    Type: FieldType = FieldType.Selectbox;\r\n    Value: string;\r\n    Input: HTMLSelectElement;\r\n    \r\n    render(container: HTMLElement): void {\r\n        const fieldContainer = document.createElement('div');\r\n        fieldContainer.classList.add('form-group');\r\n        new FieldLabel(fieldContainer, 'question-label', this.Label);\r\n        const element = document.createElement('select');\r\n        element.classList.add('form-control');\r\n        fieldContainer.appendChild(element);\r\n        container.appendChild(fieldContainer);\r\n        this.Options.forEach( (text) => {\r\n            const optionElement = document.createElement('option');\r\n            optionElement.value = text;\r\n            optionElement.innerHTML = text;\r\n            element.appendChild(optionElement);\r\n        })\r\n        element.value = this.Value;\r\n        this.Input = element;\r\n        element.addEventListener('change', (ev) => {\r\n            this.Value = ev.target.value;\r\n        });\r\n    }\r\n\r\n    setValue(event: Event): any {\r\n        event.preventDefault();\r\n        event.stopImmediatePropagation();\r\n        this.Value = event.target.value;\r\n    }\r\n\r\n    getValue(): string {\r\n        return this.Value;\r\n    }\r\n    \r\n}","import { FieldLabel } from './FieldLabel';\r\nimport { IField } from '../../interfaces/ifield';\r\nimport { FieldType } from '../../enums/field-type.enum';\r\n\r\nexport class InputField implements IField {\r\n\r\n    constructor(name: string, label: string, value: string) {\r\n        this.Name = name;\r\n        this.Label = label;\r\n        this.Value = value;\r\n    }\r\n    \r\n    Name: string;    \r\n    Label: string;\r\n    Type: FieldType = FieldType.Textbox;\r\n    Value: string;\r\n    Input: HTMLInputElement;\r\n\r\n    render(container: HTMLElement): void {\r\n        const fieldContainer = document.createElement('div');\r\n        fieldContainer.classList.add('form-group');\r\n        new FieldLabel(fieldContainer, 'question-label', this.Label);\r\n        const element = document.createElement('input');\r\n        element.classList.add('form-control');\r\n        element.setAttribute('type', this.Type);\r\n        fieldContainer.appendChild(element);\r\n        container.appendChild(fieldContainer);\r\n        element.value = this.Value;\r\n        this.Input = element;\r\n        element.addEventListener('keyup', (ev) => {\r\n            this.Value = ev.target.value;\r\n        });\r\n        element.addEventListener('paste', (ev) => {\r\n            this.Value = ev.target.value;\r\n        });\r\n        element.addEventListener('cut', (ev) => {\r\n            this.Value = ev.target.value;\r\n        });\r\n    }\r\n    \r\n    setValue(event: Event): any {\r\n        event.preventDefault();\r\n        event.stopImmediatePropagation();\r\n        this.Value = event.target.value;\r\n    }\r\n\r\n    getValue(): string {\r\n        return this.Value;\r\n    }\r\n}","import { IField } from '../../interfaces/ifield';\r\nimport { FieldType } from '../../enums/field-type.enum';\r\nimport { FieldLabel } from './FieldLabel';\r\n\r\nexport class EmailField  implements IField {\r\n    constructor(name: string, label: string, value: string | '') {\r\n        this.Name = name;\r\n        this.Label = label;\r\n        this.Value = value;\r\n    }\r\n\r\n    Name: string;    \r\n    Label: string;\r\n    Type: FieldType = FieldType.Email;\r\n    Value: string;\r\n    Input: HTMLInputElement;\r\n    \r\n    render(container: HTMLElement): void {\r\n        const fieldContainer = document.createElement('div');\r\n        fieldContainer.classList.add('form-group');\r\n        new FieldLabel(fieldContainer, 'question-label', this.Label);\r\n        const element = document.createElement('input');\r\n        element.classList.add('form-control');\r\n        element.setAttribute('type', this.Type);\r\n        fieldContainer.appendChild(element);\r\n        container.appendChild(fieldContainer);\r\n        element.value = this.Value;\r\n        this.Input = element;\r\n\r\n        element.addEventListener('keyup', (ev) => {\r\n            this.Value = ev.target.value;\r\n        });\r\n        element.addEventListener('paste', (ev) => {\r\n            this.Value = ev.target.value;\r\n        });\r\n        element.addEventListener('cut', (ev) => {\r\n            this.Value = ev.target.value;\r\n        });\r\n    }\r\n\r\n    setValue(event: Event): any {\r\n        event.preventDefault();\r\n        event.stopImmediatePropagation();\r\n        this.Value = event.target.value;\r\n    }\r\n\r\n    getValue(): string {\r\n        return this.Value;\r\n    }\r\n}","import { IField } from '../../interfaces/ifield';\r\nimport { FieldType } from '../../enums/field-type.enum';\r\nimport { FieldLabel } from './FieldLabel';\r\n\r\nexport class DateField  implements IField {\r\n    constructor(name: string, label: string, value: string | null) {\r\n        this.Name = name;\r\n        this.Label = label;\r\n        this.Value = value;\r\n    }\r\n\r\n    Name: string;    \r\n    Label: string;\r\n    Type: FieldType = FieldType.Date;\r\n    Value: string;\r\n    Input: HTMLInputElement;\r\n    \r\n    render(container: HTMLElement): void {\r\n        const fieldContainer = document.createElement('div');\r\n        fieldContainer.classList.add('form-group');\r\n        new FieldLabel(fieldContainer, 'question-label', this.Label);\r\n        const element = document.createElement('input');\r\n        element.classList.add('form-control');\r\n        element.setAttribute('type', this.Type);\r\n        fieldContainer.appendChild(element);\r\n        container.appendChild(fieldContainer);\r\n        element.value = this.Value;\r\n        this.Input = element;\r\n        element.addEventListener('change', (ev) => {\r\n            this.Value = ev.target.value;\r\n        });\r\n    }\r\n\r\n    setValue(event: Event): any {\r\n        event.preventDefault();\r\n        event.stopImmediatePropagation();\r\n        this.Value = event.target.value;\r\n    }\r\n\r\n    getValue(): string {\r\n        return this.Value;\r\n    }\r\n}","import { form } from '../components/new-form/new-form';\r\nimport { CheckboxField } from './fields/CheckboxField';\r\nimport { TextAreaField } from './fields/TextAreaField';\r\nimport { SelectField } from './fields/SelectField';\r\nimport { InputField } from './fields/InputField';\r\nimport { EmailField } from './fields/EmailField';\r\nimport { DateField } from './fields/DateField';\r\nimport { IField } from './../interfaces/ifield';\r\nexport class Components {\r\n\r\n    constructor() {\r\n        \r\n    }\r\n\r\n    public findElement(element: string, labelName: string = 'default', options: string[] = []): IField {\r\n        switch (element) {\r\n            case 'checkbox':\r\n                return new CheckboxField('name', labelName, false);\r\n            case 'date':\r\n                return new DateField('name', labelName, '');\r\n            case 'email':\r\n                return new EmailField('name', labelName, '');\r\n            case 'input':\r\n                return new InputField('name', labelName, '');\r\n            case 'select':\r\n                return new SelectField('name', labelName, options, '');\r\n            case 'textarea':\r\n                return new TextAreaField('name', labelName, '');\r\n        \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    public creatingForm(container: HTMLElement, element: string): void {\r\n        const mainContainer = document.createElement('div');\r\n        mainContainer.classList.add('container', 'creating-component', 'border', 'border-primary');\r\n        const containerLabel = document.createElement('h4');\r\n        containerLabel.innerHTML = `${element} element`;\r\n        mainContainer.appendChild(containerLabel);\r\n        const formGroup = this.newFormGroup('Label name:', 'text', 'name-one'); \r\n        mainContainer.append(formGroup);\r\n        let internalSelectElementHandler: HTMLElement;\r\n        if (element === 'select') {\r\n            internalSelectElementHandler = this.selectOptionsCreator('New option:', 'text', 'option-handler');\r\n            mainContainer.appendChild(internalSelectElementHandler);\r\n        }\r\n        \r\n        const divElement = document.createElement('div');\r\n        divElement.classList.add('row', 'row-buttons');\r\n        const addButton = this.newButton('ADD', ['btn', 'btn-success']);\r\n        addButton.addEventListener('click', (el) => {\r\n            const labelName = formGroup.getElementsByTagName('input')[0].value;\r\n            if(labelName.length === 0 || !labelName.trim()) {\r\n                alert('Label name must have at least 1 letter');\r\n            } else {\r\n                let selectElement: HTMLSelectElement | string[] = internalSelectElementHandler?.getElementsByTagName('select')[0] ?? [] ; \r\n                const createFieldElement: IField = this.findElement(element, labelName, this.getSelectedItems(selectElement));\r\n                form.addFormElement(createFieldElement);\r\n                mainContainer.remove();\r\n                createFieldElement.render(container);\r\n            }\r\n        })\r\n\r\n        const backButton = this.newButton('BACK', ['btn', 'btn-danger']);\r\n        backButton.addEventListener('click', () => {\r\n            mainContainer.remove();\r\n        })\r\n        divElement.append(addButton, backButton);\r\n        mainContainer.appendChild(divElement);  \r\n        container.appendChild(mainContainer);\r\n    }\r\n\r\n    private newFormGroup(labelName: string, inputType: string, inputName: string ): HTMLElement {\r\n        const container = document.createElement('div');\r\n        container.classList.add('form-group');\r\n        const label = document.createElement('label');\r\n        label.innerHTML = labelName;\r\n        const input = document.createElement('input');\r\n        input.classList.add('form-control');\r\n        input.setAttribute(inputType, 'text');\r\n        input.setAttribute('name', inputName);\r\n        container.append(label, input);\r\n        return container;\r\n    }\r\n\r\n    private selectOptionsCreator(labelName: string, inputType: string, inputName: string ): HTMLElement {\r\n        const container = document.createElement('div');\r\n        container.classList.add('form-group');\r\n        const label = document.createElement('label');\r\n        label.innerHTML = labelName;\r\n        const input = document.createElement('input');\r\n        input.classList.add('form-control');\r\n        input.setAttribute(inputType, 'text');\r\n        input.setAttribute('name', inputName);\r\n        const buttonsRow = document.createElement('div');\r\n        buttonsRow.classList.add('d-flex', 'flex-row-reverse');\r\n        const addButton = this.newButton('ADD', ['btn', 'btn-success']);\r\n        const removeButton = this.newButton('REMOVE', ['btn', 'btn-danger']);\r\n        buttonsRow.append(removeButton, addButton);\r\n        const selectElement = document.createElement('select');\r\n        selectElement.classList.add('form-control');\r\n        container.append(label, input, buttonsRow, selectElement);\r\n        addButton.addEventListener('click', () => {\r\n            if(input.value.length === 0 || !input.value.trim()) {\r\n                alert('Option name must have at least 1 letter');\r\n            } else {\r\n                const newOption = document.createElement('option');\r\n                newOption.text = input.value;\r\n                selectElement.add(newOption);\r\n            }\r\n        })\r\n        removeButton.addEventListener('click', () => {\r\n            if(selectElement.selectedIndex === -1) {\r\n                alert('You have to select option to remove');\r\n            } else {\r\n                selectElement.removeChild(selectElement.options[selectElement.selectedIndex]);\r\n            }\r\n        })\r\n        return container;\r\n    }\r\n\r\n    private getSelectedItems(selectField: HTMLSelectElement | string[]): string[] {\r\n        const result: string[] = [];\r\n        if ((selectField as HTMLSelectElement).type) { \r\n            for (let i = 0; i < selectField.length; i++) {\r\n                let element = selectField[i];\r\n                var optionText = element.textContent;\r\n                result.push(optionText);\r\n              }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public newButton(text: string, classes: string[] = ['btn']): HTMLElement {\r\n        const newButton = document.createElement('button');\r\n        classes.forEach(element => {\r\n            newButton.classList.add(element);\r\n        });\r\n        newButton.innerHTML = text;\r\n        return newButton;\r\n    }\r\n}","import { Form } from './Form';\r\nimport { LocStorage } from './LocStorage';\r\nimport { Components } from './Components';\r\nimport { IField } from './../interfaces/ifield';\r\nexport class FormCreator {\r\n\r\n    constructor() {\r\n        this.componentsHandler = new Components();\r\n        this.fields = [];\r\n    }\r\n\r\n    public componentsHandler: Components;\r\n    public fields: IField[];\r\n    public formName: string;\r\n\r\n    newForm(): void {\r\n        const buttonsContainer: HTMLElement = document.querySelector('div.row');\r\n        const elementsContainer: HTMLElement = document.querySelector('div.container div.container');\r\n        const controlButtonsContainer: HTMLElement = document.querySelector('div.form-controls');\r\n        const array = ['checkbox', 'date', 'email', 'input', 'select', 'textarea'];\r\n        array.forEach((element) => {\r\n            const button = this.componentsHandler.newButton(element, ['btn', 'btn-outline-info']);\r\n            button.addEventListener('click', () => {\r\n                this.componentsHandler.creatingForm(elementsContainer, element);\r\n            })\r\n            buttonsContainer.appendChild(button);\r\n        })\r\n        const saveButton = this.componentsHandler.newButton('SAVE', ['btn', 'btn-success']);\r\n        saveButton.addEventListener('click', () => {\r\n            this.formName = document.querySelector('input[name=form-name]').value;\r\n            if(this.formName.length === 0 || !this.formName.trim()) {\r\n                alert('Form name must have at least one letter');\r\n            } else {\r\n                this.saveForm();\r\n            }\r\n        })\r\n        const backButton = this.componentsHandler.newButton('BACK', ['btn', 'btn-danger']);\r\n        backButton.addEventListener('click', () => {\r\n            window.location.href='../new-document/new-document.html';\r\n        })\r\n        controlButtonsContainer.append(backButton, saveButton);\r\n    }\r\n\r\n    private saveForm(): void {\r\n        const storage = new LocStorage();\r\n        const newForm = new Form(this.fields);\r\n        storage.saveForm(newForm, this.formName);\r\n        window.location.href = '../new-document/new-document.html';\r\n    }\r\n\r\n    public addFormElement(element: IField): void {\r\n        this.fields.push(element);\r\n    }\r\n    \r\n}","import { FormCreator } from '../../classes/FormCreator';\r\nexport let form = new FormCreator();\r\nform.newForm();"]}